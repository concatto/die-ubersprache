#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = grammar
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = SLR
#RegularDefinitions
NUM: [0-9]
ID: [a-zA-Z_][a-zA-Z0-9_]*
HEX: 0x[0-9A-F]+
BIN: 0b[0-1]+
STR: \"[^\"]*\"
CHR: '.'
COMMENT: / /.*
M_COMMENT: /\*([^\*]|\*+[^\*/])*\*+/
#Tokens
INT_LIT : {NUM}+
FLOAT_LIT: {NUM}*\.{NUM}+
BIN_LIT : {BIN}
HEX_LIT : {HEX}
STRING_LIT : {STR}
CHAR_LIT: {CHR}

RB_OPEN : "("
RB_CLOSE : ")"
SB_OPEN : "["
SB_CLOSE : "]"
CB_OPEN : "{"
CB_CLOSE : "}"
INCREMENT: "++"
DECREMENT: "--"
PLUS : "+"
MINUS : "-"
DIV : "/"
MULT : "*"
COMMA : ","
MOD: "%" 
COLON : ":"
END : ";"
GT : "grösser als"
LT : "kleiner als"
GTE : "grösser oder gleich"
LTE : "kleiner oder gleich"
EQ : "gleich"
NEQ : "ungleich"
ASSIGN : "erhält"
M_COMMENT : {M_COMMENT}
COMMENT : {COMMENT}
SHIFT_RIGHT: ">>"
SHIFT_LEFT: "<<"
BIT_AND: "&"
BIT_OR: "|"
BIT_NOT: "~"
BIT_XOR: "^"
AND : "und"
OR : "oder"
NOT : "nicht"
VOID : "leer" //void
INT : "ganze" //integer
FLOAT : "reelle" //decimal
STRING : "zeichenkette" //string
BOOL : "boolesche" //boolean
CHAR: "zeichen" //char
FUNC : "funktion" //function
RETURN : "zurückliefern" //return
GIVES : "liefert" //gives
BACK : "zurück" //back, as in: gives int back; liefert ganze zurÃ¼ck
IF : "falls" //if
ELSE : "sonst" //else
FALSE : "falsch" //false
TRUE: "wahr" //true
WHILE : "während" //while
FOR : "für" //for
EACH : "jede"
OF : "von"
DO : "tun" //do
READ: "lesen"
WRITE: "schreiben"

ID : {ID}

: [\s\t\n\r]
#NonTerminals
<program>

<body>
<function>

<parameters>
<parameter_rec>
<parameter>

<statements>
<statement_rec>
<statement>

<comment>

<block>
<if_else>
<if>
<for>
<for_each>
<while>
<do_while>

<instruction>

<declaration>
<decl_assign>
<decl_only>

<identifiers>
<id_decl>

<assignment>
<unary_assign>

<return>

<id>
<id_vector>

<func_call>
<args>
<args_rec>

<input>
<output>

<exp>
<exp0>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>

<vector>

<literal>
<relational>
<negation>
<bitwise>
<arith_low>
<arith_high>
<type>
#Grammar
<program>	::= <program> <function> | <function>;

<body>		::= CB_OPEN <statements> CB_CLOSE;
<function>	::= FUNC ID #32 #1400 RB_OPEN #555 #39 <parameters> #2001 RB_CLOSE GIVES #15 <type> #1999 #2001 #16 BACK <body> #3001 #556 #1010;

<parameters>	::= <parameter_rec> | î;
<parameter_rec> 	::= <parameter>#40 COMMA <parameter_rec> | <parameter>#40;
<parameter>	::= <type> <id_decl> #2000;

<statements>	::= <statement_rec> | î;
<statement_rec>	::= <statement> <statement_rec> | <statement>;
<statement>	::= <block> | <comment> | <instruction> END;

<comment>	::= COMMENT | M_COMMENT;

<block>		::= <if> | <if_else> | <while> | <for> | <for_each> | <do_while>;
<if_else>	::= IF #1200 #2810 RB_OPEN <exp>#2813 RB_CLOSE <body> ELSE #2800 #2804 #3001 #2811 #2812 #1300 <body> #2801 #2802 #3001;
<if>		::= IF #1200 #2810 RB_OPEN <exp>#2813 RB_CLOSE <body> #2811 #2812 #3001;
<for>		::= FOR #1200 RB_OPEN <declaration>#2001 #2800 #2801 #2810 END <exp> #2813 END #2900 <assignment> #2901 RB_CLOSE #700 <body> #2902#2804 #2811 #2802 #2812 #3001;
<for_each>	::= FOR EACH RB_OPEN <type>#801 <id>#802 OF <exp>#803 RB_CLOSE#800 <body> #3001 | FOR EACH RB_OPEN <type>#801 <id_vector>#802 OF <exp>#803 RB_CLOSE#800 <body> #3001;
<while>		::= WHILE #2800 #2810 #2801  RB_OPEN <exp>#2813 RB_CLOSE#900 <body> #3001 #2804 #2811 #2802 #2812;
<do_while>	::= DO#1100 <body> WHILE RB_OPEN <exp>#61 RB_CLOSE #3002 END;

<instruction>	::= <assignment> | <declaration> #2001 | <input>#14 | <output>#15 | <return> | <func_call> #2103;

<declaration>	::= <decl_assign> | <decl_only>;
<decl_assign>	::= <type> <id_decl> ASSIGN <exp> #2000 #10 #4;
<decl_only>	::= <type> <identifiers>;

<identifiers>	::= <id_decl> #2000 COMMA <identifiers> | <id_decl> #2000;
<id_decl>	::= ID #31 | ID #31 SB_OPEN INT_LIT #50 SB_CLOSE;

<assignment>	::= <id> ASSIGN #11 <exp> #4 | <id_vector> ASSIGN #11 <exp> #4  | <unary_assign>;
<unary_assign>	::= <id> INCREMENT#12 | <id> DECREMENT#13 | <id_vector> INCREMENT#12 | <id_vector> DECREMENT#13;

<return>	::= RETURN#20 | RETURN <exp>#21;

<id>		::= ID #30;
<id_vector> 	::= ID #30 <vector>;
<func_call>	::= ID #30 #2100 RB_OPEN <args>#2101 RB_CLOSE#2102;

<args>		::= <args_rec> | î;
<args_rec>	::= <exp> #2003 COMMA <args_rec> | <exp> #2003;

<input>		::= READ <id> #70 | READ <id_vector> #70;
<output>	::= WRITE <exp> #71;

<exp> 		::= <exp> OR #304 <exp1> #401| <exp1>;
<exp1>		::= <exp1> AND #304 <exp2> #402| <exp2>;
<exp2>		::= <exp2> BIT_OR #305 <exp3> #403| <exp3>;
<exp3>		::= <exp3> BIT_XOR #305 <exp4> #404 | <exp4>;
<exp4>		::= <exp4> BIT_AND #305 <exp5> #405 | <exp5>;
<exp5>		::= <exp5> <relational> <exp6> #406 | <exp6>;
<exp6>		::= <exp6> <bitwise> <exp7> #407 | <exp7>;	
<exp7>		::= <exp7> <arith_low> <exp8> #408 | <exp8>;
<exp8>		::= <exp8> <arith_high> <exp9> #409 | <exp9> ;
<exp9> 		::= <negation> <exp10> #410| <exp10>;
<exp10>		::= <id> #610 | <id_vector> | RB_OPEN <exp> RB_CLOSE | <literal> | <func_call>;

<vector> 	::= SB_OPEN <exp>#25 SB_CLOSE;

<literal>	::= INT_LIT #601 | FLOAT_LIT #602 | BIN_LIT #603 | HEX_LIT #604 | STRING_LIT #605 | TRUE #606 | FALSE #607;
<relational>	::= GT #301 | LT#301| GTE#301 | LTE#301 | EQ#301 | NEQ#301; 
<negation>	::= MINUS#302 | BIT_NOT#302 | NOT#302;
<bitwise>	::= SHIFT_LEFT #303 | SHIFT_RIGHT#303;
<arith_low> 	::= PLUS #300 | MINUS #300;
<arith_high>	::= MULT #300 | DIV #300 | MOD #300;
<type>		::= INT #1 | FLOAT #1 | STRING #1 | BOOL #1 | VOID #1 | CHAR #1;
